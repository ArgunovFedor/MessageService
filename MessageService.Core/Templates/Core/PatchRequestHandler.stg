main(model) ::= <<
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using $model.Solution.Namespace$.Core.Repositories;
using $model.Solution.Namespace$.Core.Entities;
using $model.Solution.Namespace$.Abstractions.$model.Entity.PluralName$;


using MediatR;

namespace $model.Solution.Namespace$.Core.Requests.$model.Entity.PluralName$;

public class Patch$model.Entity.Name$Handler : IRequestHandler<Patch$model.Entity.Name$, $model.Entity.Name$Model>
{
$if(model.Entity.Properties.Data)$
    private readonly I$model.Entity.Name$Repository _$model.Entity.NameLower$Repository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;
    
    public Patch$model.Entity.Name$Handler(
        I$model.Entity.Name$Repository $model.Entity.NameLower$Repository,
        IUnitOfWork unitOfWork,
        IMapper mapper)
    {
        _$model.Entity.NameLower$Repository = $model.Entity.NameLower$Repository;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

$else$
    private readonly IUnitOfWork _unitOfWork;
    private readonly IMapper _mapper;

    public Patch$model.Entity.Name$Handler(
        IUnitOfWork unitOfWork,
        IMapper mapper)
    {
        _unitOfWork = unitOfWork;
        _mapper = mapper;
    }

$endif$

$if(model.Entity.Properties.Data)$
    public async Task<$model.Entity.Name$Model> Handle(Patch$model.Entity.Name$ request, CancellationToken cancellationToken)
    {
        var $model.Entity.NameLower$ = await _$model.Entity.NameLower$Repository
            .Get$model.Entity.Name$Async(request.$model.Entity.IdField.Name$, cancellationToken: cancellationToken);

        if ($model.Entity.NameLower$ == null)
        {
            throw new ServiceException("NOT_FOUND"); 
        }

        var obj = _mapper.Map<$model.Entity.Name$, $model.Entity.Name$Model>($model.Entity.NameLower$);
        request.Content.ApplyTo(obj);
        _mapper.Map(obj, $model.Entity.NameLower$);
        _$model.Entity.NameLower$Repository.Update$model.Entity.Name$($model.Entity.NameLower$);
        await _unitOfWork.SaveChangesAsync(cancellationToken);
        return obj;
    }
$else$
    public async Task<$model.Entity.Name$Model> Handle(Patch$model.Entity.Name$ request, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }
$endif$

}

>>
