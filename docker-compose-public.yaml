version: "2.2"
services:
    web:
        image: 12345678910111213141516/test_app_c_sharp:1.0.2
        ports:
          - '0.0.0.0:5000:5000'
        environment:
          ASPNETCORE_URLS: 'http://+:5000'
          ASPNETCORE_ENVIRONMENT: 'Staging'
          APP_APP__DATABASE__HOST: 'postgres'
          APP_APP__DATABASE__DATABASE: 'MessageService'
          APP_APP__DATABASE__USERNAME: 'postgres'
          APP_APP__DATABASE__PASSWORD: 'Qwerty123!'
          APP_Debug__IsDebugMode: 'true'
          APP_WebSocketServer__Url: "ws://client:7166/ws"
          JAEGER_SERVICE_NAME: MessageService.Web
          OTEL_EXPORTER_JAEGER_AGENT_HOST: jaeger
          OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"
          "SENTRY_DSN": "https://75df639e0226daafcc7cb977e725ba38@o4506206023516160.ingest.us.sentry.io/4507333388271616"
        depends_on:
          - postgres
          - jaeger
        restart: on-failure
    client:
      image: 12345678910111213141516/test_app_c_sharp_client:1.0.2
      ports:
        - '0.0.0.0:7166:7166'
      environment:
        ASPNETCORE_URLS: 'http://+:7166'
        ASPNETCORE_ENVIRONMENT: 'Staging'
        APP_Debug__IsDebugMode: 'true'
        APP_MessageServiceWebUrl: "http://web:5000"
        JAEGER_SERVICE_NAME: MessageService.Client
        OTEL_EXPORTER_JAEGER_AGENT_HOST: jaeger
        OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"
        "SENTRY_DSN": "https://75df639e0226daafcc7cb977e725ba38@o4506206023516160.ingest.us.sentry.io/4507333388271616"
      restart: on-failure
    postgres:
      image: postgres:15
      environment:
        POSTGRES_PASSWORD: 'Qwerty123!'
      ports:
        - '0.0.0.0:5432:5432'
      volumes:
        - postgres:/var/lib/postgresql/data
    
    jaeger:
      image: jaegertracing/all-in-one:1.45
      ports:
        - "5575:5575/udp"
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "5778:5778"
        - "16686:16686"
        - "14268:14268"
        - "14250:14250"
        - "9411:9411"
      environment:
        COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    sentry:
      image: getsentry/sentry:21.3.0
      ports:
        - "9000:9000"
      environment:
        SENTRY_SECRET_KEY: 'YOUR_SECRET_KEY'
        SENTRY_POSTGRES_HOST: postgres
        SENTRY_DB_USER: postgres
        SENTRY_DB_PASSWORD: 'Qwerty123!'
        SENTRY_REDIS_HOST: redis
        SENTRY_TSDB: 'sentry.tsdb.redis.RedisTSDB'
        SENTRY_EMAIL_HOST: 'smtp.example.com'
        SENTRY_EMAIL_PORT: '587'
        SENTRY_EMAIL_USER: 'test@example.com'
        SENTRY_EMAIL_PASSWORD: 'test'
        SENTRY_EMAIL_USE_TLS: 'true'
      depends_on:
        - postgres
        - redis
    redis:
      image: redis:latest
      volumes:
        - redis:/data

volumes:
  postgres:
  redis: